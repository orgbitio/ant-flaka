<project xmlns:c="antlib:it.haefelinger.flaka" default="test-let-with-expressions">
	<macrodef name="test">
		<attribute name="text" />
		<attribute name="expect" />
		<sequential>
			<c:let>p ::= null</c:let>
			<fail if="p" message="property p exists while expected to be absent" />
			<c:el enable="true" />
			<property name="p" value="@{text}" />
			<c:el enable="false" />
			<c:expect pname="p" value="@{expect}" />
		</sequential>
	</macrodef>


	<target name="foobar" />
	<macrodef name="barfoo">
		<sequential />
	</macrodef>

	<target name="test-let-with-expressions">
		<c:let>
				p0 ::= '#{ 'v0' }'
			  p1 ::= '${p0}'
		</c:let>
		<c:expect pname="p0" value="v0" />
		<c:expect pname="p1" value="v0" />
	</target>


	<target name="test-case">

		<!-- check that an empty let is accepted -->
			<c:let />

			<c:let>
      ;; 
      V0 = 0
      V1 = 0
      V2 = 0
      P0 := ''
      P1 := ''
      P2 := ''
      P3 := ''
      P4 := ''
      P5 := ''
    </c:let>
			<!-- test that we vars and props prepared -->
			<c:fail test="not has.var.V0" />
			<c:fail test="not has.var.V1" />
			<c:fail test="not has.var.V2" />
			<fail unless="P0" />
			<fail unless="P1" />
			<fail unless="P2" />
			<fail unless="P3" />
			<fail unless="P4" />
			<fail unless="P5" />

			<!-- Test the meaning of null and void on non existing vars and props -->
			<c:let>
      ;; do not create v0 and v1, creates v2
      v0 =
      v1 = null
      v2 = ''
      
      ;; do not create p0, p1, create p2
      p0 :=
      p1 := null
      p2 := ''
      
      ;; do not create p3, p4, create p5
      p3 ::= 
      p4 ::= null
      p5 ::= ''
    </c:let>

			<c:fail test="has.var.v0" />
			<c:fail test="has.var.v1" />
			<c:fail test="not has.var.v2" />

			<fail if="p0" />
			<fail if="p1" />
			<fail unless="p2" />

			<fail if="p3" />
			<fail if="p4" />
			<fail unless="p5" />

			<!-- Test again, this time on existing vars and properties -->
			<c:let>
      ;; remove V0 and V2
      V0 =
      V1 = null
      V2 = ''
      
      ;; P0 and P1 are unchanged
      P0 :=
      P1 := null
      P2 := ''
      
      ;; remove P3 and P4
      ;; this should both unset 
      P3 ::= 
      P4 ::= null
      P5 ::= ''
    </c:let>

			<c:fail test="has.var.V0" />
			<c:fail test="has.var.V1" />
			<c:fail test="not has.var.V2" />

			<fail unless="P0" />
			<fail unless="P1" />
			<fail unless="P2" />

			<fail if="P3" />
			<fail if="P4" />
			<fail unless="P5" />

			<!-- xxxxxxxxxxxxxxxx end suite 0x1 xxxxxxxxxxxxxxxxxxx -->

			<c:let>
      v0 = null
      v1 = null
      v2 = null
    </c:let>

			<!--  removes (!) reference x -->
			<c:let>
      x = null
      x :=
      z = true
      antfile = property['ant.file'].tofile
    </c:let>

			<fail message="[1a] **error, property x *is not* defined here: x=${x}" if="x" />

			<c:unless test=" has.var.z ">
				<fail message="[1b] **error, referece z *is* defined here" />
			</c:unless>
			<c:when test=" has.var.x ">
				<fail message="[1c] **error, reference x *is not* defined here" />
			</c:when>

			<c:when test="not has.target.foobar">
				<fail message="[1d] ** error, target foobar is defined" />
			</c:when>

			<c:when test="not has.task.barfoo">
				<fail message="[1e] **error, target barfoo is defined" />
			</c:when>


			<c:unless test=" '${ant.file}'.tofile.isfile " debug="true">
				<fail message="[2a] ${ant.file} is a file !!" />
			</c:unless>
			<c:when test="not antfile.isfile ">
				<fail message="[2b] ${ant.file} is a file !!" />
			</c:when>
			<c:unless test=" antfile.length > 0 ">
				<fail message="[2c] ${ant.file}  contains something" />
			</c:unless>


			<property name="p1" value="2.0" />

			<c:let>
      project.version := property[ 'shall not exist' ]
      project.version := property[ 'p1' ]
      project.version := 'SNAPSHOT'
    </c:let>
			<echo>
      project.version = |${project.version}|
    </echo>
			<fail unless="project.version" />
			<c:fail test=" '${project.version}' != '2.0' ">
      project.version=|${project.version}|, expected |0.0|
    </c:fail>
		</target>
	</project>