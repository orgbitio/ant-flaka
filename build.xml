<project name="ant-flaka" default="package" xmlns:au="antlib:org.apache.ant.antunit">
  <description>
    ========================================================================
    === This is the build script building the Flaka project from scratch ===
    ========================================================================

    Use option -p to see a list of targets. By  default, Flaka gets compiled
    and packaged as

          ${dist.dir}/ant-flaka-${version}.jar   

    In addition, file

         ${basedir}/ant-flaka.jar 

    gets also created. Both files should be the same. The latter is intended 
    when working on Flaka itself. Having a version-less jar  file  simplifies 
    some configuration files, especially when using Eclipse.

    Use target `package-all' to generate all distribution packages and pick
    them from folder ${build.dir}.

    You can at any time remove folder 

      ${build.dir}.

    manually in order to start building from scratch.

    Run 

      ant -p

    for a list of targets.
     
    Please make sure to have red the build instructions in file

         ${basedir}/README.txt

     Good Luck.
     ==========
  </description>
  <!--
      ;;
      ;; This a Ant build script.
      ;;
      ;; It shall build Flaka from scratch. Notice that you need to satisfy
      ;; some requirements. Please consult README.txt for details.
      ;;
  -->

  <!--
      =====================================================================
      >> depot.url <<
      This is the property pointing to a Maven 2 like repository to satisfy 
      dependency libraries.
      =====================================================================
  -->
  <property 
      name="depot.url" 
      value="http://download.haefelinger.it/flaka/dependencies" 
      />

  <property
      name="version"
      value="1.02.00_RC01"
      />
  <property 
      name="src.dir" 
      value="src" 
      />
  <property 
      name="test.dir" 
      value="test" 
      />
  <property 
      name="build.dir" 
      value="${basedir}/build" 
      />
  <property 
      name="dist.dir" 
      value="${build.dir}/dist" 
      />
  <property 
      name="lib.dir" 
      value="${build.dir}/lib" 
      />
  <property 
      name="obj.dir" 
      value="${build.dir}/classes" 
      />
  <property 
      name="javadoc.dir" 
      value="${build.dir}/javadoc" 
      />


  <!-- Define property libs.fetched if a certain file is available -->
  <available 
      file="${lib.dir}/fetched/README.txt" 
      property="libs.fetched"/>

    
  <!-- ;;
       ;; Dependencies
       ;; 
       ;; List here the dependencies. Use type = 'inline' to specify whether
       ;; the dependency gets merged with the final jar file.
  -->
  <macrodef name="fetch-required-jars">
    <sequential>
      <fetchjar 
          group="junit" 
          name="junit" 
          version="3.8.1" 
          />
      <fetchjar 
          group="jdom" 
          name="jdom" 
          version="1.0"
          type="inline"
          />
      <fetchjar 
          group="commons-httpclient" 
          name="commons-httpclient" 
          version="3.1"
          type="inline"
          />
      <fetchjar 
          group="org/apache/ant" 
          name="ant-antunit" 
          version="1.1" 
          />
      <!-- JUEL has not been uploaded into a Maven 2 repository yet -->
      <fetchjar 
          group="juel-impl" 
          name="juel" 
          version="2.2.1" 
          type="inline"
          />
    </sequential>
  </macrodef>


  <macrodef name="fetchjar">
    <attribute name="group" />
    <attribute name="name" />
    <attribute name="version" />
    <attribute name="type" default=""/>
    <attribute name="dest" default="${lib.dir}/@{name}-@{version}.jar" />
    <sequential>
      <echo>fetching @{name} ..</echo>
      <mkdir dir="${lib.dir}" />
      <get src="${depot.url}/@{group}/@{name}/@{version}/@{name}-@{version}.jar" 
           dest="@{dest}" 
           verbose="On"/>
      <!-- Now it gets really cumbersome with standard Ant -->
      <!-- All I want to say is that if type='inline', then I want to append some text -->
      <!-- to a file. The way to do so is to define a (unused) property depending on   -->
      <!-- that condition. Then, in the echo task below, I do add something depending  -->
      <!-- on the property's value. Notice that task echo does *not* support 'if' or   -->
      <!-- 'unless'. -->
      <condition 
          property="@{name}-@{version}.inline" 
          value="@{name}-@{version}.jar&#10;" 
          else="">
        <equals 
            arg1="@{type}" 
            arg2="inline" 
            casesensitive="true" 
            trim="true" />
      </condition>
      <echo
          file="${lib.dir}/__inline__.txt" 
          message="${@{name}-@{version}.inline}" 
          append="true" />
    </sequential>
  </macrodef>

  <target name="init" unless="libs.fetched">
    <fetch-required-jars />
    <mkdir dir="${lib.dir}/fetched/" />
    <tstamp>
      <format property="libs.fetched" pattern="dd-MM-yyyy HH:mm:ss -Z" />
    </tstamp>
    <echo file="${lib.dir}/fetched/README.txt">
      ====================================================================
      Remove this file's parent folder (or this file) to re-fetch required 
      libraries from repository.
      ====================================================================
      
      Last repository used:
      ${depot.url}

      This file has been created:
      ${libs.fetched}
    </echo>
    
  </target>

  
  <target name="clean" >
    <sequential>
      <delete dir="${obj.dir}" />
    </sequential>
  </target>
  
  <target name="clean-dist" >
    <sequential>
      <delete dir="${build.dir}" />
    </sequential>
  </target>

  <target name="compile" depends="init">
    <sequential>
      <!-- Todo: use M2 names -->
      <mkdir dir="${obj.dir}"/>
      <javac srcdir="src" destdir="${obj.dir}">
        <classpath>
          <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
          </fileset>
        </classpath>
      </javac>
    </sequential>
  </target>

  <macrodef name="test-init">
    <sequential>
      <mkdir dir="${build.dir}/test-classes" />
      <javac srcdir="test" destdir="${build.dir}/test-classes"> 
        <include name="**/*Test.java" />
        <classpath>
          <pathelement path="${obj.dir}"/>
          <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
          </fileset>
        </classpath>
      </javac>
    </sequential>
  </macrodef>

  <macrodef name="test-exec">
    <sequential>
      <mkdir dir="${build.dir}/test" />
      <junit>
        <classpath>
          <pathelement path="${obj.dir}"/>
          <pathelement path="${build.dir}/test-classes"/>
          <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
          </fileset>
        </classpath>
        <formatter type="brief" usefile="false"/>
        <formatter type="xml"/>
        <batchtest todir="${build.dir}/test">
          <fileset dir="${build.dir}/test-classes">
            <include name="**/*Test.class" />
          </fileset>
        </batchtest>
        <jvmarg value="-ea"/>   
      </junit>
      <!-- Add ant-flaka.jar to classpath -->
      <taskdef uri="antlib:it.haefelinger.flaka"
               resource="it/haefelinger/flaka/antlib.xml"
               classpath="${basedir}/ant-flaka.jar"/>
      <!-- Add ant-antunit.jar to classpath -->
      <taskdef uri="antlib:org.apache.ant.antunit"
               resource="org/apache/ant/antunit/antlib.xml"
               classpath="${lib.dir}/ant-antunit-1.1.jar" />
      <au:antunit>
        <fileset dir="test">
          <include name="test-*.xml" />
          <exclude name="test-scndeps.xml" />
          <exclude name="test-set-default-target.xml" />
        </fileset>
        <au:plainlistener/>
      </au:antunit>
    </sequential>
  </macrodef>

  <target name="test" depends="compile" >
    <test-init />
    <test-exec />
  </target>

  <macrodef name="zip-merge">
    <attribute name="libfile" />
    <element name="zip-element" implicit="true"/>
    <sequential>
      <zip destfile="@{libfile}" update="true">
        <zip-element/>
      </zip>
    </sequential>
  </macrodef>

  <macrodef name="inline-dependencies">
    <attribute name="file" />
    <sequential>
      <zip-merge libfile="@{file}">
        <zipgroupfileset dir="${lib.dir}">
          <patternset>
            <includesfile name="${lib.dir}/__inline__.txt"/> 
          </patternset>
        </zipgroupfileset>
      </zip-merge>
    </sequential>
  </macrodef>


  <macrodef name="package">
    <attribute name="name"     default="ant-flaka" />
    <attribute name="distdir"  default="${dist.dir}" />
    <attribute name="basename" default="@{name}-${version}" />
    <attribute name="barename" default="@{name}-bare-${version}" />
    <attribute name="objdir"   default="${obj.dir}" />
    <sequential>
      <mkdir dir="@{distdir}" />
      <delete dir="@{distdir}">
        <include name="**" />
      </delete>
      <jar jarfile="@{distdir}/@{basename}.jar">
        <fileset dir="@{objdir}">
          <include name="**/*.class" />
          <include name="**/antlib.xml" />
        </fileset>
        <fileset dir="src">
          <include name="**/antlib.xml" />
        </fileset>
      </jar>
      <!-- Provide also a stripped version, i.e. not having any dependencies -->
      <!-- inlined. Just in case of conflicts or if better libs are avail- -->
      <!-- able. -->
      <copy 
          tofile="@{distdir}/@{barename}.jar" 
          verbose="true" 
          overwrite="true" 
          file="@{distdir}/@{basename}.jar"  
          />
      <!-- Inline (non-system) dependencies -->
      <inline-dependencies 
          file="@{distdir}/@{basename}.jar"
          />
      <!-- Provide a non-versioned copy for simplified usage (for example -->
      <!-- when using Eclipse ..) -->
      <copy 
          tofile="@{name}.jar" 
          verbose="true" 
          overwrite="true" 
          file="@{distdir}/@{basename}.jar"  
          />
    </sequential>
  </macrodef>

  <target name="package" depends="compile">
    <sequential>
      <package />
    </sequential>
  </target>


  <!--:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
  <!--                       J A V A D O C                         -->
  <!--:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->

  <presetdef name="javadoc">
    <javadoc
        packagenames    = "it.haefelinger.flaka.*"
        sourcepath      = "${src.dir}"
        >
      <classpath>
        <fileset dir="${lib.dir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath> 
      <link href="http://java.sun.com/j2se/1.5.0/docs/api" />
      <link href="http://www.jdom.org/docs/apidocs" />
      <link href="http://logging.apache.org/log4j/1.2/apidocs" />
      <link href="http://javadoc.haefelinger.it/org.apache.ant/1.7.1" />
      <link href="http://javadoc.haefelinger.it/net.sourceforge.cruisecontrol/2.8.2" />
      <link href="http://javadoc.haefelinger.it/net.sourceforge.juel/2.1" />
      <link href="http://logging.apache.org/log4j/1.2/apidocs" />
      <link href="http://hc.apache.org/httpclient-3.x/apidocs" />
    </javadoc>
  </presetdef>


  <macrodef name="javadoc-exec" >
    <sequential>
      <mkdir dir="${javadoc.dir}"/>
      <javadoc destdir="${javadoc.dir}" >
        <fileset dir="${src.dir}" defaultexcludes="yes"/>
      </javadoc>      
    </sequential>
  </macrodef>

  <macrodef name="package-javadoc-exec" >
    <sequential>
      <!-- create dist folder directory -->
      <mkdir dir="${dist.dir}"/>
      <zip zipfile="${dist.dir}/flaka-javadoc-${version}.zip">
        <zipfileset dir="${javadoc.dir}"
                    prefix="it.haefelinger.flaka/"
                    >
          <include name="**/*" />
        </zipfileset>
      </zip>
    </sequential>
  </macrodef>

  
  <target name="javadoc" depends="init">
    <javadoc-exec />
  </target>
  
  <target name="package-javadoc" depends="javadoc">
    <package-javadoc-exec />
  </target>


  <!--:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
  <!--                    P A C K A G E - D I S T                  -->
  <!--:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->

  <macrodef name="package-dist-exec" >
    <attribute name="prefix" default="flaka-${version}/" />
    <sequential>
      <!-- create dist folder directory -->
      <mkdir dir="${dist.dir}"/>
      <zip zipfile="${dist.dir}/flaka-${version}.zip">
        <zipfileset dir="." prefix="@{prefix}">
          <exclude name="build/" />
          <exclude name=".project" />
          <exclude name=".settings/" />
          <exclude name=".classpath" />
          <exclude name=".svn/" />
          <exclude name=".git/" />
          <exclude name="CVS" />
          <exclude name="**/removeme/" />
          <exclude name="tryme.xml" />
          <exclude name="**/*tryme*" />
          <exclude name="tmp/" />
          <exclude name="var/" />
          <exclude name="test/**/*.jar" />
          <exclude name="test/build/" />
        </zipfileset>
      </zip>
    </sequential>
  </macrodef>


  
  <target name="package-dist" depends="package">
    <package-dist-exec />
  </target>

  <!--:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
  <!--                    P A C K A G E - A L L                    -->
  <!--:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->

  <target name="package-all" 
          depends="
                   package,
                   package-javadoc,
                   package-dist
                   " />

  <!--:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
  <!--                   E C L I P S E                             -->
  <!--:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->

  <target name="eclipse" depends="init">
    <mkdir dir="${build.dir}/eclipse" />
    <!-- Eclipse only -->
    <fetchjar 
        group="org/apache/ant" 
        name="ant" 
        version="1.7.1" 
        dest="build/eclipse/ant.jar"
        />
    <fetchjar 
        group="org/apache/ant" 
        name="ant-launcher" 
        version="1.7.1" 
        dest="build/eclipse/ant-launcher.jar"
        />
  </target>
</project>
