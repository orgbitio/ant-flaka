<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:c="antlib:it.haefelinger.flaka" default="test-el-string-literals">
	<macrodef name="init">
		<sequential>
			<c:unset>
        p0
        p1
        p2
        p3
        p4
        p5
        p6
				p7
				p8
				p9
				pa
				pb
				pc
     </c:unset>
		</sequential>
	</macrodef>

	<macrodef name="expect">
		<attribute name="have" />
		<attribute name="expected" />
		<sequential>
			<c:switch value="@{have}">
				<cmp eq="@{expected}" />
				<otherwise>
					<fail message="expected @{expected}, got @{have} .." />
				</otherwise>
			</c:switch>
		</sequential>
	</macrodef>

	<target name="test-el-format-basic">
		<init />
		<c:let>
      p0 := format()
      p1 := format('foo')
      p2 := format('%S','foo')
      p3 := format('%s%s','foo','bar')
      p4 := format('%s',true)
      p5 := format('%s',4711)
      p6 := format('%s',list('a',2))
			p7 := format('%s',null)
    </c:let>
		<fail if="p0" />
		<expect have="${p1}" expected="foo" />
		<expect have="${p2}" expected="FOO" />
		<expect have="${p3}" expected="foobar" />
		<expect have="${p4}" expected="true" />
		<expect have="${p5}" expected="4711" />
		<expect have="${p6}" expected="[a, 2]" />
		<expect have="${p7}" expected="null" />
	</target>

	<target name="test-el-replace-basic">
		<init />
		<c:let>
      p0 := replace()
      p1 := replace('a, b')
      p2 := replace('a, b',' ')
      p3 := replace('a, b','')
      p4 := replace('a, b',':','\s*,\s*')
    	p5 := replace(true,'false','true')
    </c:let>
		<fail if="p0" />
		<expect have="${p1}" expected="a, b" />
		<expect have="${p2}" expected="a b" />
		<expect have="${p3}" expected="ab" />
		<expect have="${p4}" expected="a:b" />
		<expect have="${p5}" expected="false" />

	</target>

	<target name="test-el-split-basic">
		<init />
		<c:let>
      p0 := format('%s',  split()                     )
      p1 := format('%s',  split('a,b')                )
      p2 := format('%s',  split('a,b',',')            )
      p3 := format('%s',  split('a ,b','\s*,\s*')     )  
      p4 := format('%s',  split('a,b','\s*,\s*',':')  )
      p5 := format('%s',  split('a,b',':' )           )
    </c:let>
		<!--
    About the notation:
    [a, b] means that there is a list with two elements ('a' and 'b') while
    [a,b] denotes a list with one element ('a,b').
     -->
		<expect have="${p0}" expected="[]" />
		<expect have="${p1}" expected="[a, b]" />
		<expect have="${p2}" expected="[a, b]" />
		<expect have="${p3}" expected="[a, b]" />
		<expect have="${p4}" expected="[a, b]" />
		<expect have="${p5}" expected="[a,b]" />
	</target>

	<target name="test-el-join-basic">
		<init />
		<c:let>
      p0 := join()
      p1 := join(':')
      p2 := join(':','a')
      p3 := join(':',list('a'))
      p4 := join(':',list('a','b'))
      p5 := join(':',true)
    </c:let>
		<fail if="p0" />
		<expect have="${p1}" expected="" />
		<expect have="${p2}" expected="a" />
		<expect have="${p3}" expected="a" />
		<expect have="${p4}" expected="a:b" />
		<expect have="${p5}" expected="true" />
	</target>

	<target name="test-el-typeof-basic">
		<init />
		<c:let>
	      p0 := typeof()
	      p1 := typeof(null)
	    	p2 := typeof('')
	    	p3 := typeof(true)
	    	p4 := typeof(3)
	    	p5 := typeof(pi)
	    	p6 := typeof(project)
	    	p7 := typeof(file(project))
	    	p8 := typeof(list())
	    	p9 := typeof(file(project).mtime)
			  pa := typeof(project.properties)
			  pb := typeof(property)
	    </c:let>
		<fail if="p0" />
		<expect have="${p1}" expected="null" />
		<expect have="${p2}" expected="string" />
		<expect have="${p3}" expected="boolean" />
		<expect have="${p4}" expected="integer" />
		<expect have="${p5}" expected="float" />
		<expect have="${p6}" expected="project" />
		<expect have="${p7}" expected="file" />
		<expect have="${p8}" expected="list" />
		<expect have="${p9}" expected="object" />
		<expect have="${pa}" expected="map" />
		<expect have="${pb}" expected="list" />
		<!-- TODO: must be map -->
	</target>

	<target name="test-el-nativetype-basic">
		<init />
		<c:let>
	        p0 := nativetype()
	        p1 := nativetype(null)
	        p2 := nativetype('')
	        p3 := nativetype(true)
	        p4 := nativetype(3)
	        p5 := nativetype(pi)
	        p6 := nativetype(project)
	        p7 := nativetype(file(project))
	        p8 := nativetype(list())
	        p9 := nativetype(file(project).mtime)
	      </c:let>
		<fail if="p0" />
		<expect have="${p1}" expected="" />
		<expect have="${p2}" expected="java.lang.String" />
		<expect have="${p3}" expected="java.lang.Boolean" />
		<expect have="${p4}" expected="java.lang.Long" />
		<expect have="${p5}" expected="java.lang.Double" />
		<expect have="${p6}" expected="org.apache.tools.ant.Project" />
		<expect have="${p7}" expected="java.io.File" />
		<expect have="${p8}" expected="java.util.ArrayList" />
		<expect have="${p9}" expected="java.util.Date" />
	</target>

	<target name="test-el-empty">
		<init />
		<c:let>
        p0 := empty null
        p1 := empty list()
        p2 := empty ''
    	  p3 := empty 5
    	  p4 := empty true
    	  p5 := empty ' '
    	  p6 := empty 'a'
    	  p7 := empty list(list())
      </c:let>
		<expect have="${p0}" expected="true" />
		<expect have="${p1}" expected="true" />
		<expect have="${p2}" expected="true" />
		<expect have="${p3}" expected="false" />
		<expect have="${p4}" expected="false" />
		<expect have="${p5}" expected="false" />
		<expect have="${p6}" expected="false" />
		<expect have="${p7}" expected="false" />
	</target>

	<target name="test-el-null">
		<init />
		<c:let>
	        p0 := nullp(null)
	        p1 := nullp(list())
	        p2 := nullp('')
	        p3 := nullp(5)
	        p4 := nullp(true)
	        p5 := nullp(' ')
	        p6 := nullp('a')
	        p7 := nullp(list(list()))
	      </c:let>
		<expect have="${p0}" expected="true" />
		<expect have="${p1}" expected="false" />
		<expect have="${p2}" expected="false" />
		<expect have="${p3}" expected="false" />
		<expect have="${p4}" expected="false" />
		<expect have="${p5}" expected="false" />
		<expect have="${p6}" expected="false" />
		<expect have="${p7}" expected="false" />
	</target>

	<target name="test-el-string-literals">
		<init />
		<c:let>
	    p0 := "abc"
		  p1 := 'abc'
	    p2 := 'abc"
	    p3 := "a'c"
	    p4 := 'a"c'
			p5 := 'a\'c'
			p6 := 'a\"c'
			p7 := "a\"c"
			p8 := "a\'c"
			p9 := 'a\bc'
			pa := 'a\\bc'
			pb := 'ab\'
			pc := 'ab\\'
	  </c:let>
		<expect have="${p0}" expected="abc" />
		<expect have="${p1}" expected="abc" />
		<fail if="p2" />
		<expect have="${p3}" expected="a'c" />
		<expect have="${p4}" expected="a&quot;c" />
		<expect have="${p5}" expected="a'c" />
		<expect have="${p6}" expected="a\&quot;c" />
		<expect have="${p7}" expected="a&quot;c" />
		<expect have="${p8}" expected="a\'c" />
		<expect have="${p9}" expected="a\bc" />
		<expect have="${pa}" expected="a\bc" />
		<fail if="pb" />
		<expect have="${pc}" expected="ab\" />
	</target>

	<target name="test-el-file">
		<init />
		<c:let>
	      p0 := file(null)
			  p1 := file(true)
			  p2 := file(5)
			  p3 := file('')
			  p4 := file('a/b')
			  p5 := file()
	      p6 := file('.')
	      p7 := file(project).name
	      p8 := file('/','b')
	      p9 := file('a',file('b'))
        pa := file('a','b','c')
	    	pb := file(list('a','b'))
			  pc := file( list( list( 'a', list('b') ),'c'))
	    </c:let>
		<expect have="${p0}" expected="." />
		<expect have="${p1}" expected="true" />
		<expect have="${p2}" expected="5" />
		<expect have="${p3}" expected="." />
		<expect have="${p4}" expected="a/b" />
		<expect have="${p5}" expected="." />
		<expect have="${p6}" expected="." />
		<expect have="${p7}" expected="test" />
		<expect have="${p8}" expected="/b" />
		<expect have="${p9}" expected="a/b" />
		<expect have="${pa}" expected="a/b/c" />
		<expect have="${pb}" expected="a/b" />
		<expect have="${pc}" expected="a/b/c" />
	</target>


	<target name="test-el-size">
		<init />
		<c:trycatch>
			<try>
				<mkdir dir="${basedir}/dummysize" />
				<mkdir dir="${basedir}/dummysize/d1" />
				<mkdir dir="${basedir}/dummysize/d2" />
				<c:let>
	      p0 := size(null)
			  p1 := size(true)
			  p2 := size(5)
			  p3 := size('')
			  p4 := size('a/b')
			  p5 := size(list())
	      p6 := size(list(1))
	      p7 := size(file(file(project),'dummysize'))
	      p8 := size(file(file(project),'shallnotexist'))
	    </c:let>
				<expect have="${p0}" expected="0" />
				<expect have="${p1}" expected="0" />
				<expect have="${p2}" expected="0" />
				<expect have="${p3}" expected="0" />
				<expect have="${p4}" expected="3" />
				<expect have="${p5}" expected="0" />
				<expect have="${p6}" expected="1" />
				<expect have="${p7}" expected="2" />
				<expect have="${p8}" expected="0" />
			</try>
			<finally>
				<delete dir="${basedir}/dummysize" />
			</finally>
		</c:trycatch>
	</target>

	<target name="test-el-trim">
		<init />
		<c:let>
	      p0 := trim()
	      p1 := trim('')
		  p2 := trim('a')
		  p3 := trim('ab')
		  p4 := trim(' a')
		  p5 := trim('a ')
	      p6 := trim(' a ')
	      p7 := trim('  a  ')
	      p8 := trim(' a b ')
		  p9 := trim(null)
	    </c:let>
		<fail if="p0" />
		<expect have="${p1}" expected="" />
		<expect have="${p2}" expected="a" />
		<expect have="${p3}" expected="ab" />
		<expect have="${p4}" expected="a" />
		<expect have="${p5}" expected="a" />
		<expect have="${p6}" expected="a" />
		<expect have="${p7}" expected="a" />
		<expect have="${p8}" expected="a b" />
		<fail if="p9" />
	</target>

	<target name="test-matches">
		<init />
		<c:let>
		        p0 := matches(null,null)
		        p1 := matches('','')
		        p2 := matches('a','a')
		        p3 := matches(' ','\s')
		        p4 := matches('a','\w')
		        p5 := matches('1','\d')
		        p6 := matches('abc','[a]')
		        p7 := matches('abc','ab')
		</c:let>
		<expect have="${p0}" expected="true" />
		<expect have="${p1}" expected="true" />
		<expect have="${p2}" expected="true" />
		<expect have="${p3}" expected="true" />
		<expect have="${p4}" expected="true" />
		<expect have="${p5}" expected="true" />
		<expect have="${p6}" expected="true" />
		<expect have="${p7}" expected="true" />
	</target>
	
	<target name="test-glob">
		<init />
		<c:let>
		        p0 := glob(null,null)
		        p1 := glob('','')
		        p2 := glob('a','a')
		        p3 := glob(' ','\s')
		        p4 := glob('a','\w')
		        p5 := glob('1','\d')
		        p6 := glob('abc','[a]')
			    ;;; glob's do work on entire input string
		        p7 := glob('abc','ab')
			    p8 := glob('abc','ab*')
		    p9 := glob('abc','ab?')
		    pa := glob('abc','ab[c]')
		    pb := glob('ab*','ab\*')
		</c:let>
		<expect have="${p0}" expected="true" />
		<expect have="${p1}" expected="true" />
		<expect have="${p2}" expected="true" />
		<expect have="${p3}" expected="false" />
		<expect have="${p4}" expected="false" />
		<expect have="${p5}" expected="false" />
		<expect have="${p6}" expected="false" />
		<expect have="${p7}" expected="false" />
		<expect have="${p8}" expected="true" />
		<expect have="${p9}" expected="true" />
		<expect have="${pa}" expected="true" />
		<!-- TODO -->
		<!-- expect have="${pb}" expected="true" /-->

	</target>
	
	<target name="test-glob1">
		<init />
		<c:let>
		        p0 := glob('aZb','a*b')
		        p1 := glob('aZb','a[*]')
		        p2 := glob('aZb','a[Z]b')
		        p3 := glob('aZb','a[Z*]b')
		</c:let>
		<expect have="${p0}" expected="true" />
		<expect have="${p1}" expected="false" />
		<expect have="${p2}" expected="true" />
		<expect have="${p3}" expected="true" />
	</target>
	
	<target name="test-glob2">
		<init />
		<c:let>
		        p0 := glob('aZb','aZb')
		        p1 := glob('aZb','a\Zb')
		        p2 := glob('aZb','a\\Zb')       ; cause a\\Zb is internally repr. as 'a\Zb' - why?
			    p3 := glob('aZb','a\\\\Zb') 
		        p4 := glob('a[]b','a\[\]b')
			    p5 := glob('aZb','a\*b')
			    p6 := glob('a*b','a\*b')
		</c:let>
		<expect have="${p0}" expected="true" />
		<expect have="${p1}" expected="true" />
		<expect have="${p2}" expected="true" />
		<expect have="${p3}" expected="false" />
		<expect have="${p4}" expected="true" />
		<expect have="${p5}" expected="false" />
		<expect have="${p6}" expected="true" />
	</target>
</project>