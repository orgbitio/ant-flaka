<project xmlns:c="antlib:it.haefelinger.flaka">
<target name="test-case">

	<!-- install global handler to simplify life -->
	<c:install-reference-handler/>
	
  <macrodef name="dependency">
    <attribute name="alias" default="" />

  	<attribute name="group" default="" />
    <attribute name="name" default="" />
    <attribute name="rev" default="" />

  	<element name="groupId" />
    <element name="artifactId" />
    <element name="version" />
    <sequential />
  </macrodef>

	<!-- A classical Maven dependency (except scope) -->
  <c:dependency scope="test">
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>3.8.1</version>
  </c:dependency>

	<!-- A unscoped dependency -->
  <dependency alias="log4j" group="log4j" name="log4j" rev="1.2.8" />

  <!--
      Scan depenencies into variable 'dependencies'. The structure is
      dependencies.each for all dependencies, regardless of scope and
      dependencies.scope.`scope` for all dependencies in scope `scope`

  -->
  
  <c:let>
    ;; destination folder
    libdir = 'build/var/lib'
  </c:let>
  <delete dir="#{ libdir }" />
  <mkdir dir="#{ libdir }" />
  <c:scndeps var=" dependencies ">
    <decorate>
      ;; this is the final destination folder.
      dest = libdir
    </decorate>
    <include name="test-scndeps.xml" />
  </c:scndeps>

  <c:echo shift="59=">=</c:echo>
  <c:echo>>> #{ dependencies }</c:echo>
  <c:echo shift="59=">=</c:echo>

  <c:echo>
    we got #{ size(dependencies.each) } dependencies by this scan.
  </c:echo>
  <c:echo shift="59%">%</c:echo>
  
  <c:when test=" size(dependencies.each) != 2 ">
    <fail message="expected 2 dependencies, got #{ size(dependencies.each) }" />
  </c:when>

  <!-- write dependencies in format alias  -->
  <c:for var="d" in=" dependencies.each ">
    <c:when test=" not empty d.alias ">
      <c:let>
        x = d.scope
      </c:let>
      <c:echo>
        [1] #{d.alias} | #{d.location.name} | #{d.file} | #{d.scope} | 
      </c:echo>
    </c:when>
  </c:for>


  <!-- write dependencies in format MI (maven 1) -->
  <c:for var="d" in=" dependencies.each ">
    <c:echo>[2] #{d.m1path}</c:echo>
  </c:for>
  <!-- write dependencies in format M2 (maven 2) -->
  <c:for var="d" in=" dependencies.each ">
    <c:echo>[3] |#{d.m2path}|</c:echo>
  </c:for>
  <c:for var="d" in=" dependencies.each ">
    <c:echo>
      [4] | #{d.location.name} | #{d.m2path} | #{d.scope} | 
    </c:echo>
  </c:for>

  <!-- checkout scoped dependencies -->
  <c:for var="d" in=" dependencies.scope.test ">
    <c:echo>
      [5] | #{d.location.name} | #{d.m2path} | #{d.scope} | 
    </c:echo>
  </c:for>



  <c:list var="repos">
    ;; my own repo
    'http://download.haefelinger.it/flaka/dependencies'
  </c:list>
  
  <c:for var="d" in=" dependencies['each'] ">
    <c:for var="r" in=" repos ">
      <c:echo>
        [a] #{ d.file.toabs }
        [b] #{ d.file.exists ? 'exists' : 'no, does not exist' }
        [c] #{ concat(r,d.m2path) }
      </c:echo>
      <c:choose>
        <c:when test=" not d.file.exists ">
          <get src="#{ concat(r,d.m2path) }" dest="#{ d.file }" verbose="on" />
        </c:when>
        <c:otherwise>
          <c:echo>
            ;; should not happen as we remove test/build/var ..
            #{dest} already existing, fetching #{url} ignored. 
          </c:echo>
        </c:otherwise>
      </c:choose>
    </c:for>
  </c:for>
</target>
</project>