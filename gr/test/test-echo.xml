<project xmlns:c="antlib:it.haefelinger.flaka" default="test-case-19">
	<macrodef name="reset">
		<sequential>
			<c:unset>
				  p
	        p0
	        p1
	        p2
	        p3
	      </c:unset>
			<fail if="p" />
			<fail if="p0" />
			<fail if="p1" />
			<fail if="p2" />
		</sequential>
	</macrodef>

	<macrodef name="reset-tmpdir">
		<sequential>
			<mkdir dir="${tmpdir}" />
			<delete dir="${tmpdir}">
				<include name="**/*" />
			</delete>
		</sequential>
	</macrodef>

	<macrodef name="myecho">
		<attribute name="pname" default="p" />
		<attribute name="shift" default="" />
		<attribute name="ics" default=";" />
		<attribute name="cs" default=";" />
		<attribute name="ws" default="true" />
		<attribute name="cl" default="true" />
		<text name="text" optional="true" />
		<sequential>
			<reset-tmpdir />
			<c:unset>@{pname}</c:unset>
			<fail if="@{pname}" />
			<c:echo cl="@{cl}" ws="@{ws}" ics="@{ics}" cs="@{cs}" shift="@{shift}" file="${tmpfile}">@{text}</c:echo>
			<!-- loadfile does not set property if file is empty. A empty -->
			<!-- echo would still give a echo line. Therefore we correct  -->
			<!-- this misbehaviour and define the property if the file    -->
			<!-- exists and it's length is zero. -->
			<loadfile property="@{pname}" srcfile="${tmpfile}" />
			<condition property="@{pname}" value="">
				<and>
					<available file="${tmpfile}" />
					<length file="${tmpfile}" when="eq" length="0" />
				</and>
			</condition>
		</sequential>
	</macrodef>

	<target name="tryme">
		<reset />
		<myecho> 

     a
    </myecho>
		<echo message="${p}" />
		<c:expect pname="p" value="&#xA;a&#xA;" />
	</target>


	<target name="test-case-01">
		<reset />
		<myecho>
		</myecho>
		<echo>${p}</echo>
		<c:expect pname="p" value="" />
		<myecho shift="5%">
		</myecho>
		<echo>${p}</echo>
		<c:expect pname="p" value="%%%%%" />
		<myecho shift="5%">a</myecho>
		<c:expect pname="p" value="%%%%%a" />
		<myecho shift="5%">
			a
		</myecho>
		<c:expect pname="p" value="%%%%%a" />
	</target>

	<target name="test-case-02">
		<myecho />
		<c:expect pname="p" value="" />
	</target>

	<target name="test-case-03">
		<myecho>foobar&#xA;</myecho>
		<c:expect pname="p" value="foobar&#xA;" />
	</target>

	<target name="test-case-04">
		<myecho>&#xA;foo&#xA;</myecho>
		<c:expect pname="p" value="foo" />
	</target>

	<target name="test-case-05">
		<myecho>&#xA;&#xA;foo&#xA;&#xA;</myecho>
		<c:expect pname="p" value="&#xA;foo&#xA;" />
	</target>


	<target name="test-case-07">
		<myecho shift="0">[1a]</myecho>
		<c:expect pname="p" value="[1a]" />
	</target>

	<target name="test-case-08">
		<myecho shift="0"> [1b]</myecho>
		<c:expect pname="p" value=" [1b]" />
	</target>

	<target name="test-case-09">
		<myecho shift="0">[2a]
    </myecho>
		<c:expect pname="p" value="[2a]&#xA;    " />
	</target>

	<target name="test-case-10">
		<myecho> [2b]
    </myecho>
		<c:expect pname="p" value=" [2b]&#xA;    " />
	</target>

	<target name="test-case-11">
		<!-- TODO: check me -->
		<myecho shift="0">[3a]&#xA;    2ndline&#xA;</myecho>
		<c:expect pname="p" value="[3a]&#xA;    2ndline&#xA;" />
	</target>
	<target name="test-case-12">
		<!-- how does this work ?? -->
		<myecho shift="0"> [3b]&#xA;    2ndline&#xA;</myecho>
		<c:expect pname="p" value=" [3b]&#xA;    2ndline&#xA;" />
	</target>
	<target name="test-case-13">
		<myecho shift="0">
    [4a]
    2ndline
		</myecho>
		<c:expect pname="p" value="[4a]&#xA;2ndline" />
	</target>

	<!-- Test continuation lines -->
	<target name="test-cont-01">
		<myecho>
    ; ignore \
    Hello\
    ,\
    ..World.
    </myecho>
		<c:expect pname="p" value="" />
	</target>

	<target name="test-cont-02">
		<myecho shift="0">\&#xA;</myecho>
		<c:expect pname="p" value="" />
		<myecho shift="0">\&#xA;a</myecho>
		<c:expect pname="p" value="a" />
		<myecho shift="0">\&#xA; a</myecho>
		<c:expect pname="p" value="a" />
	</target>

	<target name="test-case-15">
		<myecho shift="0">a
    b
    
    </myecho>
		<c:expect pname="p" value="a&#xA;    b&#xA;    &#xA;    " />
		<!-- whitespace before EOF is NOT chopped off -->
		<myecho>a&#xA;b&#xA;&#xA;  </myecho>
		<c:expect pname="p" value="a&#xA;b&#xA;&#xA;  " />
		<!-- if you want trailing whitespace chopped off, then use a cont line -->
		<myecho>a&#xA;b&#xA;\&#xA;  </myecho>
		<c:expect pname="p" value="a&#xA;b&#xA;" />
		<myecho>a&#xA;b\&#xA;  </myecho>
		<c:expect pname="p" value="a&#xA;b" />
		<!-- This shows that leading whitespace (incl. EOL) is eaten up. -->
		<!-- Trailing ws is not eaten. If necessary, you can end the last -->
		<!-- line using a continuation line to get the desired effect. -->
		<myecho>
		a
		b\
		</myecho>
		<c:expect pname="p" value="a&#xA;b" />
	</target>

	<target name="test-case-16">
		<myecho shift="0">
    aa
    b b
  </myecho>
		<c:expect pname="p" value="aa&#xA;b b" />
	</target>

	<!-- Test Comments -->
	<!-- A comment line starts with a certain character and eats up -->
	<!-- the whole line. Cont lines are not supported though. -->

	<target name="test-comment-01">
		<myecho>;</myecho>
		<c:expect pname="p" value="" />
		<myecho>;&#xA;</myecho>
		<c:expect pname="p" value="" />
		<myecho>&#xA;;&#xA;</myecho>
		<c:expect pname="p" value="" />
	</target>

	<target name="test-comment-02">
		<myecho>;</myecho>
		<c:expect pname="p" value="" />
		<myecho>;&#xA;</myecho>
		<c:expect pname="p" value="" />
		<myecho>&#xA;;&#xA;</myecho>
		<c:expect pname="p" value="" />
	</target>

	<target name="test-comment-03">
		<myecho>;&#xA;a</myecho>
		<c:expect pname="p" value="a" />
		<myecho>&#xA;;&#xA;b</myecho>
		<c:expect pname="p" value="b" />
	</target>

	<target name="test-comment-04">
		<myecho>;</myecho>
		<c:expect pname="p" value="" />

		<myecho>;&#xA;;</myecho>
		<c:expect pname="p" value="" />

		<myecho>a&#xA;;&#xA;b</myecho>
		<c:expect pname="p" value="a&#xA;b" />

		<myecho>;\&#xA;a</myecho>
		<c:expect pname="p" value="" />
		<myecho>\&#xA;;b</myecho>
		<c:expect pname="p" value="" />
		<myecho>\&#xA;;\&#xA;b</myecho>
		<c:expect pname="p" value="" />
	</target>

	<target name="test-comment-05">
		<myecho>a ; comment</myecho>
		<c:expect pname="p" value="a " />
	</target>


	<target name="test-escape-01">
		<!-- The outcome here is "" cause \EOF is a continuation line -->
		<myecho>\</myecho>
		<c:expect pname="p" value="" />
		<!-- The backslash has no effect -->
		<myecho>\a</myecho>
		<c:expect pname="p" value="\a" />
		<!-- Neither in this example -->
		<myecho>\\b</myecho>
		<c:expect pname="p" value="\\b" />
	</target>

	<target name="test-escape-02">
		<myecho>a</myecho>
		<c:expect pname="p" value="a" />
		<!-- an \ followed by EOF is a cont line. Therefore, the \ is -->
		<!-- eaten up.-->
		<myecho>a\</myecho>
		<c:expect pname="p" value="a" />
		<!-- a backslash used on an non-escaped char has no effect. -->
		<myecho>\a\</myecho>
		<c:expect pname="p" value="\a" />
		<!-- two backslashes followed by EOF disables a cont line. -->
		<myecho>\a\\</myecho>
		<c:expect pname="p" value="\a\" />
		<!-- simimlar as above -->
		<myecho>\\</myecho>
		<c:expect pname="p" value="\" />
		<!-- the second last backslash disables the cont line, the -->
		<!-- other two have no effect. -->
		<myecho>\\\\</myecho>
		<c:expect pname="p" value="\\\" />
		<myecho>a\\\\</myecho>
		<c:expect pname="p" value="a\\\" />
	</target>

	<target name="test-indent-01">
		<!-- one tab will eat up 4 blank characters -->
		<myecho>&#xA;&#x9;a&#xA; b&#xA;</myecho>
		<c:expect pname="p" value="a&#xA;b" />

		<myecho>&#xA;&#x9;a&#xA;&#x9;&#x9;b&#xA;</myecho>
		<c:expect pname="p" value="a&#xA;&#x9;b" />

		<myecho>&#xA;&#x9;  a&#xA;    b&#xA;</myecho>
		<c:expect pname="p" value="a&#xA; b" />
	</target>

	<target name="test-trailing-01">
		<myecho>a&#xA;&#xA;</myecho>
		<c:expect pname="p" value="a&#xA;&#xA;" />

		<myecho>a&#xA;</myecho>
		<c:expect pname="p" value="a&#xA;" />
		<myecho>a&#xA;&#xA;</myecho>
		<c:expect pname="p" value="a&#xA;&#xA;" />

	</target>

	<target name="test-case-17">
		<!-- test escaping inline comments -->
		<myecho>
  	  ; comment
  	</myecho>
		<c:expect pname="p" value="" />
		<myecho>
  	  \; comment
  	</myecho>
		<c:expect pname="p" value="; comment" />
		<myecho>
      \\; comment
    </myecho>
		<c:expect pname="p" value="\; comment" />
	</target>

	<target name="test-case-18">
		<!-- test other comment chars -->
		<myecho cs="#" ics=";;">
	    # kskdjskjds
	    foobar ;; '[c:echo] foobar'
	     </myecho>
		<c:expect pname="p" value="foobar " />

		<myecho cs="#" ics="">
	    #{3 * 4}   you cannot see me
	    not ; any longer an inline comment!
	  </myecho>
		<c:expect pname="p" value="not ; any longer an inline comment!" />

		<myecho>
	    \#{3 * 4} ; #{3 * 4}
	    \; not a comment
	  </myecho>
		<c:expect pname="p" value="#{3 * 4} &#10;; not a comment" />
	</target>

	<target name="test-case-19">
		<!-- test, that we can make echo behaving like the standard one -->
		<myecho cl="false" ics="" cs="" ws="false">
      ;
      a;b
      c\
       d
    </myecho>
    <c:expect pname="p" value="&#10;      ;&#10;      a;b&#10;      c\&#10;       d&#10;    " />
	</target>


	<target name="test-manual-example">
		<!-- test example given in manual -->
		<myecho>
	    \#{3 * 4}            ; '#{3 * 4}'
		</myecho>
		<c:expect pname="p" value="#{3 * 4}            " />
		<myecho>
	    \\#{3 * 4}           ; '\#{3 * 4}'
    </myecho>
		<c:expect pname="p" value="\#{3 * 4}           " />
		<myecho>
	    #{ '\\' }#{3 * 4}    ; '\12'
    </myecho>
		<c:expect pname="p" value="\12    " />
		<myecho>
	    #{ concat('\\',3*4)} ; '\12'
    </myecho>
		<c:expect pname="p" value="\12 " />
		<myecho>
	    ; comment            ; 
    </myecho>
		<c:expect pname="p" value="" />
		<myecho>
	    \; not a comment     ; '; not a comment'
    </myecho>
		<c:expect pname="p" value="; not a comment     " />
		<myecho>
	    \\; not a comment    ; '\; not a comment'
	  </myecho>
		<c:expect pname="p" value="\; not a comment    " />
	</target>


	<property name="tmpfile" location="${basedir}/tmp/echo.txt" />
	<dirname property="tmpdir" file="${tmpfile}" />

	<reset-tmpdir />
	<echo file="${tmpfile}" message="hello, world&#xA;&#xA;" />
	<loadfile property="p" srcfile="${tmpfile}" />
	<c:expect pname="p" value="hello, world&#xA;&#xA;" />

	<!-- We have to deal with a change in Ant 1.7.1 and 1.8.: -->
	<!-- 1.7.1: echo "" => empty file -->
	<!-- 1.8.1: echo "" => file with one character (\n) -->
	<reset-tmpdir />
	<c:unset>p</c:unset>
	<fail if="p" />
	<echo file="${tmpfile}" />
	<loadfile property="p" srcfile="${tmpfile}" />
	<condition property="empty-echo-eol" value="true" else="false">
		<isset property="p" />
	</condition>
	<echo>empty echo prints eol-char? ${empty-echo-eol}</echo>
</project>